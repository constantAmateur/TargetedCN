% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_GC_counts.R
\name{get_GC_counts}
\alias{get_GC_counts}
\title{Gets the counts of window GC content at the windows anchored on the positions given.}
\usage{
get_GC_counts(reg_list, isize, lstrip = 3, rstrip = 3,
  summarise = c("Region", "GRange", "BP"), genome, min_cvg_frac = 0.5,
  max_genome_frac = 0.04, max_quick_regions = 2000)
}
\arguments{
\item{reg_list}{A list (or GRangesList) of regions where we want to know the GC content in a window anchored at the contained locations.  For example, a list might contain a set of read locations in the first entry and a mappability mask of the genome in the second.}

\item{isize}{The insert size to use.}

\item{lstrip}{The number of bases to trim at the 5' end of the window.}

\item{rstrip}{The number of bases to trim at the 3' end of the window.}

\item{summarise}{One of 'Region', 'GRange', or 'BP'.  If 'BP', the GC count in each anchored window is returned.  If 'Region' or 'Grange', returns the frequency of window GC counts aggregated across each individual GRange entry (if 'GRange' specified) or each list entry in reg_list (if 'Region' specified).}

\item{genome}{The BSgenome object from which genome sequence is extracted.}

\item{min_cvg_frac}{In deciding how to fetch data, the number of entries in the covering GRanges objects is compared to the number in each reg_list.  If this fraction is larger than min_cvg_frac (i.e., we don't save many fetches by loading the covering regions rather then the targets directly), then the direct fetch method is used.}

\item{max_genome_frac}{If the requested region covers more than this fraction of the genome, then fetch the entire genome for simplicity and speed.}

\item{max_quick_regions}{Don't try and fetch things the quick way if we have more than this many distinct regions to fetch.}
}
\value{
If summarise is 'Region', a list of matricies with length(reg_list) rows and columns giving the number of windows with specified GC count in that region.  Otherwise reg_list is returned with extra columns 'forw' and 'revr' added holding either the frequencies of GC windows (if summarise is 'GRange') or the individual GC counts in order (if summarise is 'BP').
}
\description{
For each location referred to by the GRanges contained within reg_list, the GC content in two surrounding windows is calculated.  The first, the "forward window", start at the genomic location of interest + lstrip and is isize-lstrip-rstrip bases long.  The second, the "reverse window", ends at the genomic location of interest - lstrip and extends backwards (towards lower genomic coordinates) for isize-lstrip-rstrip bases.
}
\details{
There are three different methods used to fetch this information depending on the size and length of the genomic ranges requested.  
When the number of genomic locations to interrogate is small and they cover only a small fraction of the genome, the sequence for each window is simply directly fetched.
When only a small fraction of genome is covered by a large number of independent regions, we fetch the sequence for an overlapping larger region and then extract the GC content at the locations of interest.
When a large fraction of the genome is required, the entire genome is fetched and GC content calculated in a sliding window.  The required windows are then extracted by sub setting this larger list.

It is useful to specify multiple regions of interest at the same time if possible as this prevents the genome sequence having to fetched multiple times.

After the GC has been calculated in each of the desired windows, optional aggregation is performed.  Returning either the GC count at each window, the frequency of windows with different counts for each separate GRange specified or the frequency of windows with different counts for each region in reg_list.
}

